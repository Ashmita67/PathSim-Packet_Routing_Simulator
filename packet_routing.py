# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/140Jr6866owYf4tE9KMIYiZcbznmz1pNJ
"""

from google.colab import files
uploaded = files.upload()  # This will open a file picker to upload 'router_connections_dataset.csv'

import pandas as pd

df = pd.read_csv("router_connections_dataset.csv")  # Make sure the name matches
print(df.head())

# STEP 3: Load dataset and filter out negative weights
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import time

# Load the CSV file
df = pd.read_csv("router_connections_dataset.csv")

# Remove negative weights
df = df[df['Weight'] >= 0]
print("Filtered Dataset:")
print(df.head())

# STEP 4: Create the graph
G = nx.DiGraph()
for _, row in df.iterrows():
    G.add_edge(row['Source'], row['Destination'], weight=row['Weight'])

# STEP 5: Visualize the network
def visualize_graph(G, highlight_path=None, title="Network Topology"):
    pos = nx.spring_layout(G, seed=42)
    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=1000, arrows=True)
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red')
    if highlight_path:
        edge_list = list(zip(highlight_path[:-1], highlight_path[1:]))
        nx.draw_networkx_edges(G, pos, edgelist=edge_list, edge_color='green', width=2)
    plt.title(title)
    plt.axis('off')
    plt.show()

# Display the full graph
visualize_graph(G)

# STEP 6: Apply Dijkstra and Bellman-Ford
def run_algorithms(G, source, target):
    print(f"\nüìç Path from {source} to {target}:\n")

    # Dijkstra
    try:
        start = time.time()
        path_d = nx.dijkstra_path(G, source, target, weight='weight')
        time_d = time.time() - start
        print("‚úÖ Dijkstra Path:", path_d)
        print("   ‚û§ Total Cost:", nx.dijkstra_path_length(G, source, target, weight='weight'))
        print("   ‚è±Ô∏è Time Taken:", round(time_d, 6), "sec")
    except Exception as e:
        print("‚ùå Dijkstra failed:", e)
        path_d = []

    # Bellman-Ford
    try:
        start = time.time()
        path_bf = nx.bellman_ford_path(G, source, target, weight='weight')
        time_bf = time.time() - start
        print("\n‚úÖ Bellman-Ford Path:", path_bf)
        print("   ‚û§ Total Cost:", nx.bellman_ford_path_length(G, source, target, weight='weight'))
        print("   ‚è±Ô∏è Time Taken:", round(time_bf, 6), "sec")
    except Exception as e:
        print("‚ùå Bellman-Ford failed:", e)
        path_bf = []

    return path_d, path_bf

# Define source and destination routers
source = 'R44'
destination = 'R5'

# Run both algorithms
path_d, path_bf = run_algorithms(G, source, destination)

# Visualize Bellman-Ford Path
visualize_graph(G, highlight_path=path_bf, title="Bellman-Ford Shortest Path")